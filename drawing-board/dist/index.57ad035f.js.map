{"mappings":"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","sources":["cloneReact/drawing-board/src/js/index.js"],"sourcesContent":["class DrawingBoard {\r\n  MODE = 'NONE';\r\n  IsMouseDown = false;\r\n  eraserColor = '#FFF';\r\n  backgroundColor = '#FFF';\r\n  IsNavigatorVisible = false;\r\n  undoArray = [];\r\n\r\n  containerEl;\r\n  canvasEl;\r\n  toolbarEl;\r\n  brushEl;\r\n  colorPickerEl;\r\n  brushPanelEl;\r\n  brushSliderEl;\r\n  brushSizePreviewEl;\r\n  eraserEl;\r\n  navigatorEl;\r\n  navigatorImageContainerEl;\r\n  navigatorImageEl;\r\n  undoEl;\r\n  clearEl;\r\n  downloadEl;\r\n\r\n  constructor() {\r\n    this.assignElement();\r\n    this.initContext();\r\n    this.initCanvasBackgroundColor();\r\n    this.addEvent();\r\n  }\r\n\r\n  assignElement() {\r\n    this.containerEl = document.getElementById('container');\r\n    this.canvasEl = this.containerEl.querySelector('#canvas');\r\n    this.toolbarEl = this.containerEl.querySelector('#toolbar');\r\n    this.brushEl = this.toolbarEl.querySelector('#brush');\r\n    this.colorPickerEl = this.toolbarEl.querySelector('#colorPicker');\r\n    this.brushPanelEl = this.containerEl.querySelector('#brushPanel');\r\n    this.brushSliderEl = this.brushPanelEl.querySelector('#brushSize');\r\n    this.brushSizePreviewEl =\r\n      this.brushPanelEl.querySelector('#brushSizePreview');\r\n    this.eraserEl = this.toolbarEl.querySelector('#eraser');\r\n    this.navigatorEl = this.toolbarEl.querySelector('#navigator');\r\n    this.navigatorImageContainerEl = this.containerEl.querySelector('#imgNav');\r\n    this.navigatorImageEl =\r\n      this.navigatorImageContainerEl.querySelector('#canvasImg');\r\n    this.undoEl = this.toolbarEl.querySelector('#undo');\r\n    this.clearEl = this.toolbarEl.querySelector('#clear');\r\n    this.downloadEl = this.toolbarEl.querySelector('#download');\r\n  }\r\n\r\n  initContext() {\r\n    this.context = this.canvasEl.getContext('2d');\r\n  }\r\n\r\n  initCanvasBackgroundColor() {\r\n    this.context.fillStyle = this.backgroundColor;\r\n    this.context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n  }\r\n\r\n  addEvent() {\r\n    this.brushEl.addEventListener('click', this.onClickBrush);\r\n    this.canvasEl.addEventListener('mousedown', this.onMouseDown);\r\n    this.canvasEl.addEventListener('mousemove', this.onMouseMove);\r\n    this.canvasEl.addEventListener('mouseup', this.onMouseUp);\r\n    this.canvasEl.addEventListener('mouseout', this.onMouseOut);\r\n    this.brushSliderEl.addEventListener('input', this.onChangeBrushSize);\r\n    this.colorPickerEl.addEventListener('input', this.onChangeColor);\r\n    this.eraserEl.addEventListener('click', this.onClickEraser);\r\n    this.navigatorEl.addEventListener('click', this.onClickNavigator);\r\n    this.undoEl.addEventListener('click', this.onClickUndo);\r\n    this.clearEl.addEventListener('click', this.onClickClear);\r\n    this.downloadEl.addEventListener('click', this.onClickDownload);\r\n  }\r\n\r\n  onChangeColor = event => {\r\n    this.brushSizePreviewEl.style.backgroundColor = event.target.value;\r\n  };\r\n\r\n  onChangeBrushSize = event => {\r\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\r\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\r\n  };\r\n\r\n  onMouseDown = event => {\r\n    if (this.MODE === 'NONE') return;\r\n    this.isMouseDown = true;\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.beginPath();\r\n    this.context.moveTo(currentPosition.x, currentPosition.y);\r\n    this.context.lineCap = 'round';\r\n    if (this.MODE === 'BRUSH') {\r\n      this.context.strokeStyle = this.colorPickerEl.value;\r\n      this.context.lineWidth = this.brushSliderEl.value;\r\n    } else if (this.MODE === 'ERASER') {\r\n      this.context.strokeStyle = this.eraserColor;\r\n      this.context.lineWidth = 50;\r\n    }\r\n    this.saveState();\r\n  };\r\n\r\n  onMouseMove = event => {\r\n    if (!this.isMouseDown) return;\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.lineTo(currentPosition.x, currentPosition.y);\r\n    this.context.stroke();\r\n  };\r\n\r\n  onMouseUp = () => {\r\n    if (this.MODE === 'NONE') return;\r\n    this.isMouseDown = false;\r\n    this.updateNavigator();\r\n  };\r\n\r\n  onMouseOut = () => {\r\n    if (this.MODE === 'NONE') return;\r\n    this.isMouseDown = false;\r\n    this.updateNavigator();\r\n  };\r\n\r\n  getMousePosition = event => {\r\n    const boundaries = this.canvasEl.getBoundingClientRect();\r\n    return {\r\n      x: event.clientX - boundaries.left,\r\n      y: event.clientY - boundaries.top,\r\n    };\r\n  };\r\n\r\n  onClickBrush = event => {\r\n    const IsActive = event.currentTarget.classList.contains('active');\r\n    this.MODE = IsActive ? 'NONE' : 'BRUSH';\r\n    this.canvasEl.style.cursor = IsActive ? 'default' : 'crosshair';\r\n    this.brushPanelEl.classList.toggle('hide');\r\n    event.currentTarget.classList.toggle('active');\r\n    this.eraserEl.classList.remove('active');\r\n  };\r\n\r\n  onClickEraser = event => {\r\n    const IsActive = event.currentTarget.classList.contains('active');\r\n    this.MODE = IsActive ? 'NONE' : 'ERASER';\r\n    this.canvasEl.style.cursor = IsActive ? 'default' : 'crosshair';\r\n    this.brushPanelEl.classList.add('hide');\r\n    event.currentTarget.classList.toggle('active');\r\n    this.brushEl.classList.remove('active');\r\n  };\r\n\r\n  onClickNavigator = event => {\r\n    this.IsNavigatorVisible = !event.currentTarget.classList.cotains('active');\r\n    event.currentTarget.classList.toggle('active');\r\n    this.navigatorImageContainerEl.classList.toggle('hide');\r\n    this.updateNavigator();\r\n  };\r\n\r\n  updateNavigator = () => {\r\n    if (!this.IsNavigatorVisible) return;\r\n    this.navigatorImageEl.src = this.canvasEl.toDataURL();\r\n  };\r\n\r\n  saveState = () => {\r\n    if (this.undoArray.length > 4) {\r\n      this.undoArray.shift();\r\n      this.undoArray.push(this.canvasEl.toDataURL());\r\n      return;\r\n    }\r\n    this.undoArray.push(this.canvasEl.toDataURL());\r\n  };\r\n\r\n  onClickUndo = () => {\r\n    if (this.undoArray.length === 0) return;\r\n    let prevDataUrl = this.undoArray.pop();\r\n    let prevImg = new Image();\r\n    prevImg.onload = () => {\r\n      this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n      this.context.drawImage(\r\n        prevImg,\r\n        0,\r\n        0,\r\n        this.canvasEl.width,\r\n        this.canvasEl.height,\r\n        0,\r\n        0,\r\n        this.canvasEl.width,\r\n        this.canvasEl.height,\r\n      );\r\n    };\r\n    prevImg.src = prevDataUrl;\r\n  };\r\n\r\n  onClickClear = () => {\r\n    this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n    this.undoArray = [];\r\n    this.updateNavigator();\r\n    this.initCanvasBackgroundColor();\r\n  };\r\n\r\n  onClickDownload = () => {\r\n    this.downloadEl.href = this.canvasEl.toDataURL('image/jpeg', 1);\r\n    this.downloadEl.download = 'example.jpeg';\r\n  };\r\n}\r\n\r\nnew DrawingBoard();\r\n"],"names":["DrawingBoard","MODE","IsMouseDown","eraserColor","backgroundColor","IsNavigatorVisible","undoArray","containerEl","canvasEl","toolbarEl","brushEl","colorPickerEl","brushPanelEl","brushSliderEl","brushSizePreviewEl","eraserEl","navigatorEl","navigatorImageContainerEl","navigatorImageEl","undoEl","clearEl","downloadEl","constructor","this","assignElement","initContext","initCanvasBackgroundColor","addEvent","document","getElementById","querySelector","context","getContext","fillStyle","fillRect","width","height","addEventListener","onClickBrush","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onChangeBrushSize","onChangeColor","onClickEraser","onClickNavigator","onClickUndo","onClickClear","onClickDownload","event","style","target","value","isMouseDown","currentPosition","getMousePosition","beginPath","moveTo","x","y","lineCap","strokeStyle","lineWidth","saveState","lineTo","stroke","updateNavigator","boundaries","getBoundingClientRect","clientX","left","clientY","top","IsActive","currentTarget","classList","contains","cursor","toggle","remove","add","cotains","src","toDataURL","length","shift","push","prevDataUrl","pop","prevImg","Image","onload","clearRect","drawImage","href","download"],"version":3,"file":"index.57ad035f.js.map"}